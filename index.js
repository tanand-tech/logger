!function(e,o){"object"==typeof exports&&"object"==typeof module?module.exports=o():"function"==typeof define&&define.amd?define([],o):"object"==typeof exports?exports.logger=o():e.logger=o()}(global,(function(){return(()=>{"use strict";var e={956:e=>{e.exports=require("tslog")}},o={};function t(r){var n=o[r];if(void 0!==n)return n.exports;var s=o[r]={exports:{}};return e[r](s,s.exports,t),s.exports}var r={};return(()=>{var e=r;Object.defineProperty(e,"__esModule",{value:!0}),e.updateSettings=void 0;const o=t(956),n=["silly","trace","debug","info","warn","error","fatal"];let s={displayFunctionName:!1,exposeErrorCodeFrame:!1,delimiter:"\t",dateTimeTimezone:"Asia/Kuala_Lumpur",prettyInspectOptions:{colors:!0,compact:!1,depth:null},jsonInspectOptions:{colors:!0,compact:!1,depth:null},logLevelsColors:{0:"cyan",1:"white",2:"green",3:"blue",4:"yellow",5:"red",6:"magenta"}};e.updateSettings=function(e){s={...s,...e}},e.default=function(e,...t){const r=process.env.LOGGER_MIN_LEVEL?.toLowerCase(),i=r&&n.includes(r)?r:"info";return new o.Logger({name:`[0m[1m${e}[0m${t.reduce(((e,o)=>e+" "+o),"")}[90m`,displayFilePath:"true"===process.env.LOGGER_DISPLAY_FILE_PATH?.toLowerCase()?"hideNodeModulesOnly":"hidden",minLevel:i,...s})}})(),r})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJtYXBwaW5ncyI6IkNBQUEsU0FBMkNBLEVBQU1DLEdBQzFCLGlCQUFaQyxTQUEwQyxpQkFBWEMsT0FDeENBLE9BQU9ELFFBQVVELElBQ1EsbUJBQVhHLFFBQXlCQSxPQUFPQyxJQUM5Q0QsT0FBTyxHQUFJSCxHQUNlLGlCQUFaQyxRQUNkQSxRQUFnQixPQUFJRCxJQUVwQkQsRUFBYSxPQUFJQyxJQVJuQixDQVNHSyxRQUFRLFdBQ1gsTSxrQ0NWQUgsRUFBT0QsUUFBVUssUUFBUSxXQ0NyQkMsRUFBMkIsR0FHL0IsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQkUsSUFBakJELEVBQ0gsT0FBT0EsRUFBYVQsUUFHckIsSUFBSUMsRUFBU0ssRUFBeUJFLEdBQVksQ0FHakRSLFFBQVMsSUFPVixPQUhBVyxFQUFvQkgsR0FBVVAsRUFBUUEsRUFBT0QsUUFBU08sR0FHL0NOLEVBQU9ELFEsc0dDckJmLGVBRU1ZLEVBQTZCLENBQUMsUUFBUyxRQUFTLFFBQVMsT0FBUSxPQUFRLFFBQVMsU0FZeEYsSUFBSUMsRUFBMEIsQ0FDMUJDLHFCQUFxQixFQUNyQkMsc0JBQXNCLEVBQ3RCQyxVQUFXLEtBQ1hDLGlCQUFrQixvQkFDbEJDLHFCQUFzQixDQUNsQkMsUUFBUSxFQUNSQyxTQUFTLEVBQ1RDLE1BQU8sTUFFWEMsbUJBQW9CLENBQ2hCSCxRQUFRLEVBQ1JDLFNBQVMsRUFDVEMsTUFBTyxNQUVYRSxnQkF6Qm9DLENBQ3BDLEVBQUcsT0FDSCxFQUFHLFFBQ0gsRUFBRyxRQUNILEVBQUcsT0FDSCxFQUFHLFNBQ0gsRUFBRyxNQUNILEVBQUcsWUF1QlAsMEJBQStCQyxHQUMzQlgsRUFBVSxJQUFLQSxLQUFZVyxJQUcvQixtQkFBK0JDLEtBQWlCQyxHQUM1QyxNQUFNQyxFQUFXQyxRQUFRQyxJQUFJQyxrQkFBa0JDLGNBQ3pDQyxFQUEwQkwsR0FBWWYsRUFBVXFCLFNBQVNOLEdBQVlBLEVBQVcsT0FFdEYsT0FBTyxJQUFJLEVBQUFPLE9BQU8sQ0FDZFQsS0FBTSxXQUFpQkEsUUFBY0MsRUFBS1MsUUFBTyxDQUFDQyxFQUFHQyxJQUFNRCxFQUFJLElBQU1DLEdBQUcsV0FDeEVDLGdCQUM0RCxTQUF4RFYsUUFBUUMsSUFBSVUsMEJBQTBCUixjQUEyQixzQkFBd0IsU0FDN0ZDLFNBQUFBLEtBQ0duQixNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbG9nZ2VyL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9sb2dnZXIvZXh0ZXJuYWwgY29tbW9uanMgXCJ0c2xvZ1wiIiwid2VicGFjazovL2xvZ2dlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9sb2dnZXIvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wibG9nZ2VyXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImxvZ2dlclwiXSA9IGZhY3RvcnkoKTtcbn0pKGdsb2JhbCwgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidHNsb2dcIik7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsImltcG9ydCB7IExvZ2dlciwgVExvZ0xldmVsQ29sb3IsIFRMb2dMZXZlbE5hbWUsIElTZXR0aW5nc1BhcmFtIH0gZnJvbSAndHNsb2cnO1xuXG5jb25zdCBsb2dMZXZlbHM6IFRMb2dMZXZlbE5hbWVbXSA9IFsnc2lsbHknLCAndHJhY2UnLCAnZGVidWcnLCAnaW5mbycsICd3YXJuJywgJ2Vycm9yJywgJ2ZhdGFsJ107XG5cbmNvbnN0IGxvZ0xldmVsc0NvbG9yczogVExvZ0xldmVsQ29sb3IgPSB7XG4gICAgMDogJ2N5YW4nLCAvLyBTaWxseVxuICAgIDE6ICd3aGl0ZScsIC8vIFRyYWNlXG4gICAgMjogJ2dyZWVuJywgLy8gRGVidWdcbiAgICAzOiAnYmx1ZScsIC8vIEluZm9cbiAgICA0OiAneWVsbG93JywgLy8gV2FyblxuICAgIDU6ICdyZWQnLCAvLyBFcnJvclxuICAgIDY6ICdtYWdlbnRhJywgLy8gRmF0YWxcbn07XG5cbmxldCBjb25maWdzOiBJU2V0dGluZ3NQYXJhbSA9IHtcbiAgICBkaXNwbGF5RnVuY3Rpb25OYW1lOiBmYWxzZSxcbiAgICBleHBvc2VFcnJvckNvZGVGcmFtZTogZmFsc2UsXG4gICAgZGVsaW1pdGVyOiAnXFx0JyxcbiAgICBkYXRlVGltZVRpbWV6b25lOiAnQXNpYS9LdWFsYV9MdW1wdXInLFxuICAgIHByZXR0eUluc3BlY3RPcHRpb25zOiB7XG4gICAgICAgIGNvbG9yczogdHJ1ZSxcbiAgICAgICAgY29tcGFjdDogZmFsc2UsXG4gICAgICAgIGRlcHRoOiBudWxsLFxuICAgIH0sXG4gICAganNvbkluc3BlY3RPcHRpb25zOiB7XG4gICAgICAgIGNvbG9yczogdHJ1ZSxcbiAgICAgICAgY29tcGFjdDogZmFsc2UsXG4gICAgICAgIGRlcHRoOiBudWxsLFxuICAgIH0sXG4gICAgbG9nTGV2ZWxzQ29sb3JzLFxufTtcblxuZXhwb3J0IHR5cGUgeyBMb2dnZXIsIFRMb2dMZXZlbE5hbWUgYXMgTG9nTGV2ZWwgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVNldHRpbmdzKHNldHRpbmdzOiBJU2V0dGluZ3NQYXJhbSkge1xuICAgIGNvbmZpZ3MgPSB7IC4uLmNvbmZpZ3MsIC4uLnNldHRpbmdzIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvZ2dlcihuYW1lOiBzdHJpbmcsIC4uLmFyZ3M6IHN0cmluZ1tdKTogTG9nZ2VyIHtcbiAgICBjb25zdCBsb2dMZXZlbCA9IHByb2Nlc3MuZW52LkxPR0dFUl9NSU5fTEVWRUw/LnRvTG93ZXJDYXNlKCkgYXMgVExvZ0xldmVsTmFtZSB8IHVuZGVmaW5lZDtcbiAgICBjb25zdCBtaW5MZXZlbDogVExvZ0xldmVsTmFtZSA9IGxvZ0xldmVsICYmIGxvZ0xldmVscy5pbmNsdWRlcyhsb2dMZXZlbCkgPyBsb2dMZXZlbCA6ICdpbmZvJztcblxuICAgIHJldHVybiBuZXcgTG9nZ2VyKHtcbiAgICAgICAgbmFtZTogYFxceDFiWzBtXFx4MWJbMW0ke25hbWV9XFx4MWJbMG0ke2FyZ3MucmVkdWNlKChuLCBzKSA9PiBuICsgJyAnICsgcywgJycpfVxceDFiWzkwbWAsXG4gICAgICAgIGRpc3BsYXlGaWxlUGF0aDpcbiAgICAgICAgICAgIHByb2Nlc3MuZW52LkxPR0dFUl9ESVNQTEFZX0ZJTEVfUEFUSD8udG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnID8gJ2hpZGVOb2RlTW9kdWxlc09ubHknIDogJ2hpZGRlbicsXG4gICAgICAgIG1pbkxldmVsLFxuICAgICAgICAuLi5jb25maWdzLFxuICAgIH0pO1xufVxuIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImdsb2JhbCIsInJlcXVpcmUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibG9nTGV2ZWxzIiwiY29uZmlncyIsImRpc3BsYXlGdW5jdGlvbk5hbWUiLCJleHBvc2VFcnJvckNvZGVGcmFtZSIsImRlbGltaXRlciIsImRhdGVUaW1lVGltZXpvbmUiLCJwcmV0dHlJbnNwZWN0T3B0aW9ucyIsImNvbG9ycyIsImNvbXBhY3QiLCJkZXB0aCIsImpzb25JbnNwZWN0T3B0aW9ucyIsImxvZ0xldmVsc0NvbG9ycyIsInNldHRpbmdzIiwibmFtZSIsImFyZ3MiLCJsb2dMZXZlbCIsInByb2Nlc3MiLCJlbnYiLCJMT0dHRVJfTUlOX0xFVkVMIiwidG9Mb3dlckNhc2UiLCJtaW5MZXZlbCIsImluY2x1ZGVzIiwiTG9nZ2VyIiwicmVkdWNlIiwibiIsInMiLCJkaXNwbGF5RmlsZVBhdGgiLCJMT0dHRVJfRElTUExBWV9GSUxFX1BBVEgiXSwic291cmNlUm9vdCI6IiJ9